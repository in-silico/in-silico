// CUP specification for a simple expression evaluator (w/ actions)

import pee.Arbol.*;
import pee.intermedio.*;
import pee.*;
import java.util.*;

/*parser code {: 
    LinkedList<Funcion> funciones = new LinkedList<Funcion>(); 
    
    public LinkedList<Funcion> getFunciones() {
        return funciones;
    }
:}*/

/* Terminals (tokens returned by the scanner). */
terminal    SEMI, MAS, MENOS, POR, DIV, MOD, COMA;
terminal    IPAR, DPAR, MAYOR, MENOR, MENI, MAYI;
terminal    IGUAL, DIF, YLOG, OLOG, NOLOG, ROTI, ROTD;
terminal    YBIT, OBIT, XORBIT, SI, ENTONCES, MIENTRAS;
terminal    INICIO, FIN, RETORNAR, ENTERO, VACIO;
terminal Integer   ENTLIT;
terminal String   ID, ERRTKN;

/* Non-terminals */
non terminal Funcion    funcion;
non terminal            params, lparams;
non terminal Statment   stmt;
non terminal Operacion    expr;
non terminal Integer    tipo, vardcl;
non terminal LinkedList<Statment> bstmt, lstmt;

/* Precedences */
precedence left MAS, MENOS;
precedence left POR, DIV, MOD;


/* The grammar */
funcion ::= tipo:t ID:nom IPAR {: Contexto.context.act = new Funcion(nom,t); :} params DPAR 
    vardcl bstmt:lst {: Funcion f = Contexto.popFuncion(); f.stmt=lst; RESULT=f; :};
    
tipo ::= ENTERO {: RESULT = Constantes.entero; :}
    | VACIO {: RESULT = Constantes.vacio; :};
    
params  ::= lparams 
    |
    ;
    
//error posible: "tipo ID" reduce a lparams y vardcl
lparams ::= lparams COMA tipo:t ID:var {: Contexto.context.nueva(var, t, Tipo.Param); :}
    | tipo:t ID:var {: Contexto.context.nueva(var, t, Tipo.Param); :}
    ;

// Retorna el tipo de variable
vardcl  ::= tipo:t ID:var {: Contexto.context.nueva(var, t, Tipo.LocalVar); RESULT=t; :}
    | vardcl:t COMA ID:var {: Contexto.context.nueva(var, t, Tipo.LocalVar); RESULT=t; :}
    | vardcl:t SEMI {: RESULT=t; :}
    ;
    
lstmt   ::= lstmt:l stmt:s {: l.add(s); RESULT=l; :}
    | stmt:s  {: LinkedList<Statment> l = new LinkedList<Statment>(); l.add(s); RESULT=l; :}
    ;

bstmt   ::= INICIO lstmt:l FIN  {: RESULT = l; :};
	      
stmt    ::= expr:e SEMI  {: RESULT = e; :};

expr      ::= expr:e1 MAS expr:e2    {: RESULT = new Binaria(e1, e2, Constantes.suma); :} 
	      | expr:e1 MENOS expr:e2     {: RESULT = new Binaria(e1, e2, Constantes.resta); :} 
	      | expr:e1 POR expr:e2     {: RESULT = new Binaria(e1, e2, Constantes.mult); :} 
	      | expr:e1 DIV expr:e2    {: RESULT = new Binaria(e1, e2, Constantes.div); :} 
	      | expr:e1 MOD expr:e2       {: RESULT = new Binaria(e1, e2, Constantes.mod);  :}
	      | ENTLIT:n                  {: RESULT = new LitEnt(n); :}
	      | ID:v                     {: RESULT = Variable.get(v); :}
	      | IPAR expr:e DPAR      {: RESULT = e; :}      
	      ;

