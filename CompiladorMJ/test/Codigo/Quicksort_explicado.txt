str1: "Ingrese el tamano del arreglo: "
str2: ""
str3: "Ingrese el elemento "
str4: ": "
str5: ""
str6: ""
str7: "El vector ordenado es: "
str8: " "


_DV_Test: [_Test_partition,_Test_quicksort]


# Funcion static void main(string [] args)
_ic_main:


# int i;
Move 0, R1

# i = 0;
Move 0, R1

# int [] arreglo;
Move 0, R2

# int tam;
Move 0, R3

# Test prueba;
Move 0, R4

# Library.print("Ingrese el tamano del arreglo: ");
Library __print(str1), Rdummy

# tam = Library.readi();
Library __readi(), R5
Move R5, R3

# Library.println("");
Library __println(str2), Rdummy

# arreglo = new int[tam];
Move R3, R5
Mul 4, R5
Library __allocateArray(R5), R6
Move R6, R2

# while(i < tam){
_while_0:
Move R1, R5
Move R3, R6
Compare R6, R5
JumpGE _salida_while_0

# Library.print("Ingrese el elemento ");
Library __print(str3), Rdummy

# Library.printi(i + 1);
Move R1, R5
Move 1, R6
Add R6, R5
Library __printi(R5), Rdummy

# Library.print(": ");
Library __print(str4), Rdummy

# arreglo[i] = Library.readi();
Library __readi(), R5
Move R1, R6
MoveArray R5, R2[R6]

# Library.println("");
Library __println(str5), Rdummy

# i = i + 1
Move R1, R5
Move 1, R6
Add R6, R5
Move R5, R1

# }
Jump _while_0
_salida_while_0:

# prueba = new Test();
Library __allocateObject(4), R5
MoveField _DV_Test, R5.0
Move R5, R4

# prueba.quicksort(arreglo, 0, tam - 1);
Move R4, R5
Move R2, R6
Move 0, R7
Move R3, R8
Move 1, R9
Sub R9, R8
VirtualCall R4.1(this = R5, p1 = R6, p2 = R7, p3 = R8), Rdummy

# i = 0;
Move 0, R5
Move R5, R1

# Library.println("");
Library __println(str6), Rdummy

# Library.println("El vector ordenado es: ");
Library __println(str7), Rdummy

# while(i < tam){
_while_1:
Move R1, R5
Move R3, R6
Compare R6, R5
JumpGE _salida_while_1

# if(i == tam - 1){
Move R1, R5
Move R3, R6
Move 1, R7
Sub R7, R6
Compare R6, R5
JumpFalse _else_0

# Library.printi(arreglo[i]);
Move R2, R5
Move R1, R6
MoveArray R5[R6], R7
Library __printi(R7), Rdummy
Jump _salida_if_0

# else{
_else_0:

# Library.printi(arreglo[i]);
Move R2, R5
Move R1, R6
MoveArray R5[R6], R7
Library __printi(R7), Rdummy

# Library.print(" ");
Library __print(str8), Rdummy

# }
_salida_if_0:

# i = i + 1
Move R1, R5
Move 1, R6
Add R6, R5
Move R5, R1

# }
Jump _while_1
_salida_while_1:

# }
Library __exit(0), Rdummy


# Funcion int partition(int [] a, int low, int high)
_Test_partition:

# int pivot;
Move 0, R1

# pivot = a[low];
Move p1, R2
Move p2, R3
MoveArray R2[R3], R4
Move R4, R1

# int i;
Move 0, R2

# i = low
Move p2, R3
Move R3, R2

# int j;
Move 0, R3

# j = high;
Move p3, R4
Move R4, R3

# int tmp;
Move 0, R4

# while (true){
_while_2:
Move 1, R5
Move 1, R6
Compare R6, R5
JumpFalse _salida_while_2

# while (a[i] < pivot){
_while_3:
Move p1, R5
Move R2, R6
MoveArray R5[R6], R7
Move R1, R8
Compare R8, R7
JumpGE _salida_while_3

# i = i+1;
Move R2, R5
Move 1, R6
Add R6, R5
Move R5, R2

# }
Jump _while_3
_salida_while_3:

# while (a[j] > pivot){
_while_4:
Move p1, R5
Move R3, R6
MoveArray R5[R6], R7
Move R1, R8
Compare R8, R7
JumpLE _salida_while_4

# j = j-1;
Move R3, R5
Move 1, R6
Sub R6, R5
Move R5, R3

# }
Jump _while_4
_salida_while_4:

# if (i >= j){
Move R2, R5
Move R3, R6
Compare R6, R5
JumpL _salida_if_1

# break;
Jump _salida_while_2

# }
_salida_if_1:

# tmp = a[i];
Move p1, R5
Move R2, R6
MoveArray R5[R6], R7
Move R7, R4

# a[i] = a[j];
Move p1, R5
Move R3, R6
MoveArray R5[R6], R7
Move p1, R8
Move R2, R9
MoveArray R7, R8[R9]

# a[j] = tmp;
Move R4, R5
Move p1, R6
Move R3, R7
MoveArray R5, R6[R7]

# i = i + 1;
Move R2, R5
Move 1, R6
Add R6, R5
Move R5, R2

# j = j - 1;
Move R3, R5
Move 1, R6
Sub R6, R5
Move R5, R3

# }
Jump _while_2
_salida_while_2:

# return j;}
Move R3, R5
Return R5


# Funcion void quicksort(int [] a, int low, int high)
_Test_quicksort:

# if (low < high){
Move p2, R1
Move p3, R2
Compare R2, R1
JumpGE _salida_if_2

# int mid;
Move 0, R1

# mid = partition(a, low, high);
Move this, R2
Move p1, R3
Move p2, R4
Move p3, R5
Move this, R6
VirtualCall R6.0(this = R2, p1 = R3, p2 = R4, p3 = R5), R6
Move R6, R1

# quicksort(a, low, mid);
Move this, R2
Move p1, R3
Move p2, R4
Move R1, R5
Move this, R6
VirtualCall R6.1(this = R2, p1 = R3, p2 = R4, p3 = R5), Rdummy

# quicksort(a, mid+1, high);
Move this, R2
Move p1, R3
Move R1, R4
Move 1, R5
Add R5, R4
Move p3, R6
Move this, R7
VirtualCall R7.1(this = R2, p1 = R3, p2 = R4, p3 = R6), Rdummy

# }
_salida_if_2:

# }
Return 999