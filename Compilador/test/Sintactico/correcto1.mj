class gateway 
{
	int a, e, e2, e3;
	perro s, s, s, sfd, dss, dss;
	
	static void main(String [] args)
	{
		int[] s;
		boolean[] a;
		fdsa[] dsf;	
		a.s();
		(a+b).s();
		a = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * (rsfd).length + -43 + !43 + "awd" + true + false + null];
		dsadas.dsads(a + (1 + 3).sd);
		return;
		return d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		if(d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null])
		{
			a = d[a + (1 + 3).sd][dsa.das(a + (1 + -3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
			dsadas.dsads(a + (1 + 3).sd);
			return;
			return d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		}
		if(d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null])
		{
			a = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
			dsadas.dsads(a + (1 + 3).sd);
			return;
			return d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		}
		else
		{
		        a = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
			dsadas.dsads(a + (1 + 3).sd);
			return;
			return d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		}
		if(true)
		a = b;
		else
		a = c;
		while(d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null])
		a = b;
		while(d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null])
		{
		
		        a = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
			dsadas.dsads(a + (1 + 3).sd);
			return;
			return d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		}
		break;
		continue;
		{{{{int j = 0;}}}}
		int a;
		int a = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		a a;
		b s = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
	}


	perro dasjads(perro a, int sd, string das, ads sda, boolean sfad){}
	void dasjads(perro a, int sd, string das, ads sda, boolean sfad){}
	static perro dasjads(perro a, int sd, string das, ads sda, boolean sfad){}
	static void dasjads(perro a, int sd, string das, ads sda, boolean sfad){}
	int a, e, e2, e3;
	perro s, s, s, sfd, dss, dss;
	boolean addas, ad2sad, dasda2, dsdsa_dsads;
}

class gateway extends dsdasda 
{
	int a, e, e2, e3;
	perro s, s, s, sfd, dss, dss;
	
	static void main(String [] args)
	{
		a = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		dsadas.dsads(a + (1 + 3).sd);
		return;
		return d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		if(d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null])
		{
			a = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
			dsadas.dsads(a + (1 + 3).sd);
			return;
			return d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		}
		if(d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null])
		{
			a = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
			dsadas.dsads(a + (1 + 3).sd);
			return;
			return d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		}
		else
		{
		        a = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
			dsadas.dsads(a + (1 + 3).sd);
			return;
			return d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		}
		if(true)
		a = b;
		else
		a = c;
		while(d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null])
		a = b;
		while(d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null])
		{
		
		        a = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
			dsadas.dsads(a + (1 + 3).sd);
			return;
			return d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		}
		break;
		continue;
		{{{{int j = 0;}}}}
		int a;
		int a = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
		a a;
		b s = d[a + (1 + 3).sd][dsa.das(a + (1 + 3).sd, a + (1 + 3).sd) + (2 + a + (1 + 3).sd).dsa(a + (1 + 3).sd, a + (1 + 3).sd) + this + new dsa() + new int[a + (1 + 3).sd] + new casa[a + (1 + 3).sd] * rsfd.length + (-43) + !43 + "awd" + true + false + null];
	}


	perro dasjads(perro a, int sd, string das, ads sda, boolean sfad){}
	void dasjads(perro a, int sd, string das, ads sda, boolean sfad){}
	static perro dasjads(perro a, int sd, string das, ads sda, boolean sfad){}
	static void dasjads(perro a, int sd, string das, ads sda, boolean sfad){}
	int a, e, e2, e3;
	perro s, s, s, sfd, dss, dss;
	boolean addas, ad2sad, dasda2, dsdsa_dsads;
}