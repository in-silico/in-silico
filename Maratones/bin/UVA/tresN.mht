From: "Guardado por Windows Internet Explorer 8"
Subject: The 3n + 1 problem
Date: Fri, 18 Sep 2009 19:57:23 -0500
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CA389A.3D271150"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7100.0

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01CA389A.3D271150
Content-Type: text/html;
	charset="Windows-1252"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://uva.onlinejudge.org/external/1/100.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos =
(nikos@cbl.leeds.ac.uk), CBLU, University of Leeds =
--><HTML><HEAD><TITLE>The 3n + 1 problem</TITLE>
<META content=3D"text/html; charset=3Dwindows-1252" =
http-equiv=3DContent-Type>
<META name=3Ddescription content=3D"The 3n + 1 problem">
<META name=3Dkeywords content=3Dhtmlatex>
<META name=3Dresource-type content=3Ddocument>
<META name=3Ddistribution content=3Dglobal><LINK rel=3DSTYLESHEET=20
href=3D"http://uva.onlinejudge.org/external/1/htmlatex.css">
<META name=3DGENERATOR content=3D"MSHTML 8.00.7100.4129"></HEAD>
<BODY lang=3DEN bgColor=3D#ffffff>
<H1><BR clear=3Dall>
<CENTER>
<TABLE bgColor=3D#0060f0>
  <TBODY>
  <TR>
    <TD><B><FONT color=3D#c0ffff size=3D5>&nbsp;<A=20
      name=3DSECTION0001000000000000000000>The 3<I>n</I> + 1=20
      problem</A></FONT>&nbsp;</B></TR></TBODY></TABLE></CENTER></H1>
<P>
<H2><FONT color=3D#0070e8><A=20
name=3DSECTION0001001000000000000000>Background</A></FONT></H2>
<P>Problems in Computer Science are often classified as belonging to a =
certain=20
class of problems (e.g., NP, Unsolvable, Recursive). In this problem you =
will be=20
analyzing a property of an algorithm whose classification is not known =
for all=20
possible inputs.=20
<P>
<H2><FONT color=3D#0070e8><A name=3DSECTION0001002000000000000000>The=20
Problem</A></FONT></H2>
<P>Consider the following algorithm: <PRE><TT>=20
		1. 		 input <I>n</I>
<P>
		2. 		 print <I>n</I>
<P>
		3. 		 if <I>n</I> =3D 1 then STOP
<P>
		4. 		 		 if <I>n</I> is odd then  <IMG alt=3Dtex2html_wrap_inline44 =
align=3Dmiddle src=3D"http://uva.onlinejudge.org/external/1/100img1.gif" =
width=3D95 height=3D25>=20
<P>
		5. 		 		 else  <IMG alt=3Dtex2html_wrap_inline46 align=3Dmiddle =
src=3D"http://uva.onlinejudge.org/external/1/100img2.gif" width=3D74 =
height=3D27>=20
<P>
		6. 		 GOTO 2
<P>
</TT></P></PRE>
<P>Given the input 22, the following sequence of numbers will be printed =
22 11=20
34 17 52 26 13 40 20 10 5 16 8 4 2 1=20
<P>It is conjectured that the algorithm above will terminate (when a 1 =
is=20
printed) for any integral input value. Despite the simplicity of the =
algorithm,=20
it is unknown whether this conjecture is true. It has been verified, =
however,=20
for all integers <I>n</I> such that 0 &lt; <I>n</I> &lt; 1,000,000 (and, =
in=20
fact, for many more numbers than this.)=20
<P>Given an input <I>n</I>, it is possible to determine the number of =
numbers=20
printed (including the 1). For a given <I>n</I> this is called the=20
<EM>cycle-length</EM> of <I>n</I>. In the example above, the cycle =
length of 22=20
is 16.=20
<P>For any two numbers <I>i</I> and <I>j</I> you are to determine the =
maximum=20
cycle length over all numbers between <U><I>i</I> and <I>j</I>.=20
<P></U></U>
<H2><FONT color=3D#0070e8><A name=3DSECTION0001003000000000000000>The=20
Input</A></FONT></H2>
<P>The input will consist of a series of pairs of integers <I>i</I> and=20
<I>j</I>, one pair of integers per line. All integers will be less than=20
1,000,000 and greater than 0.=20
<P>You should process all pairs of integers and for each pair determine =
the=20
maximum cycle length over all integers between and including <I>i</I> =
and=20
<I>j</I>.=20
<P>You can assume that no operation overflows a 32-bit integer.=20
<P>
<H2><FONT color=3D#0070e8><A name=3DSECTION0001004000000000000000>The=20
Output</A></FONT></H2>
<P>For each pair of input integers <I>i</I> and <I>j</I> you should =
output=20
<I>i</I>, <I>j</I>, and the maximum cycle length for integers between =
and=20
including <I>i</I> and <I>j</I>. These three numbers should be separated =
by at=20
least one space with all three numbers on one line and with one line of =
output=20
for each line of input. The integers <I>i</I> and <I>j</I> must appear =
in the=20
output in the same order in which they appeared in the input and should =
be=20
followed by the maximum cycle length (on the same line).=20
<P>
<H2><FONT color=3D#0070e8><A name=3DSECTION0001005000000000000000>Sample =

Input</A></FONT></H2>
<P><PRE>1 10
100 200
201 210
900 1000
</PRE>
<P>
<H2><FONT color=3D#0070e8><A name=3DSECTION0001006000000000000000>Sample =

Output</A></FONT></H2>
<P><PRE>1 10 20
100 200 125
201 210 89
900 1000 174
</PRE>
<P></P></BODY></HTML>

------=_NextPart_000_0000_01CA389A.3D271150
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://uva.onlinejudge.org/external/1/100img1.gif

R0lGODlhXwAZAIAAAAAAAP///yH5BAEAAAEALAAAAABfABkAAAKWjI+py50AnZyP2tti0BhD3oUU
B3aAdYqbmqWbG8IOrJWKzC5gjd/oceK1cjPay2CrjIAfZO9I1H1cU6fk6WMCGdOu99uckKhScHKl
hUqjWav7jMAq38EyO07NW+XyuB+JtnbnpkbW17dFGMY1SJf2cijWFdPIhHhVman5t9np+QkaKjpK
Wmp6ipqqusra6voKGys721EAADs=

------=_NextPart_000_0000_01CA389A.3D271150
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://uva.onlinejudge.org/external/1/100img2.gif

R0lGODlhSgAbAIAAAAAAAP///yH5BAEAAAEALAAAAABKABsAAAKCjI+py+0Onpy0LhANzrb7mWEa
95Wmhh6iR54dtwbiGjetK4d3mquzDtmZIrRbDbHZjGzCobKXEBZVzKT1ipXCLhcYkIlTTKNG0lTb
LJ2RrRiRmj7itmYj25uWhX2+Otn6kbdHNVhoIWeY2KXIaNP4KAYpOUlZaXmJmam5ydnp+QlaAAA7

------=_NextPart_000_0000_01CA389A.3D271150
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Location: http://uva.onlinejudge.org/external/1/htmlatex.css

SMALL.TINY {
	FONT-SIZE: xx-small
}
SMALL.SCRIPTSIZE {
	FONT-SIZE: xx-small
}
SMALL.FOOTNOTESIZE {
	FONT-SIZE: x-small
}
SMALL.SMALL {
	FONT-SIZE: small
}
BIG.LARGE {
	FONT-SIZE: large
}
BIG.XLARGE {
	FONT-SIZE: x-large
}
BIG.XXLARGE {
	FONT-SIZE: xx-large
}
BIG.HUGE {
	FONT-SIZE: xx-large
}
BIG.XHUGE {
	FONT-SIZE: xx-large
}

------=_NextPart_000_0000_01CA389A.3D271150--
